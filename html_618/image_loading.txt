이미지 로딩

: 이미지가 출력되는 과정은

1. 이미지 파일로부터 로딩하는 과정
2. 로딩된 이미지가 출력되는 두 과정으로 나뉜다.

	하지만 어떤 경우든 이미지 로딩이 완료된 후에야 이미지를 사용할 수
	있다.

<img> 태그와 Imgae 객체

Image 객체는 <img> 태그에 의해 생성된 DOM 객체로서,
자바스크립트 코드로 이미지를 다룰 수 있게 한다.

* Image 객체의 프로퍼티

	.src // 이미지 주소
	.width // 이미지가 출력될 폭, 이미지가 로딩되면 이미지의
			실제 폭으로 초기화
	.height // 이미지가 출력될 높이, 이미지가 로딩되면 이미지의
			실제 높이로 초기화
	.complete // 이미지의 로딩이 완료되었는지 여부, true/false

* 이미지 로딩 완료와 onload

	<img id="myImg" src="apple.png" width="..." height="...">
	
	1. var myImg = document.getElementById("myImg");
	// myImg는 Image 객체(<img>태그를 찾아 Image 객체를 알아낸다)

	2. myImg.src ="banana.png"
	// <img> 태그에 banana.png 이미지 출력
	(Image 객체의 src 프로퍼티에 banana.png 파일명을 지정한다.)
		
	3. var width = myImg.width;
	// width는 banana.png 이미지의 폭
		(banana.png 이미지의 폭을 알아내는 한 줄 코드 추가)

: 이미지 그리기

* 이미지 객체 생성

캔버스에 이미지를 그리기 위해서는
이미지를 담을 이미지 객체가 필요하다.

	var img = new Image();

	img.onload = function() // 이미지 로딩이 완료되면 함수 코드 실행
	{
		...// 이곳에 img 객체에 로드된 이미지를 그리는 코드 작성
	}

	img.src = "test.png";
		// img 객체에 test.png 파일로부터 이미지 로딩 시작

이미지 로딩이 완료되어야 이미지를 그릴 수 있으므로,
이미지 로딩을 지시하기 전 img.onload 리스너에
이미지가 로딩되었을 때 이미지를 그리는
자바스크립트 코드를 등록해둔다.

: 이미지 그리기

이미지 로딩이 완료되면 컨택스트 객체의 drawImage() 메소드를
이용하여 이미지를 그린다.
drawImage()는 다음 몇 가지 유형이 있다.

1. 원본 크기로 그리기
원본 이미지 크기 그대로 그리는 drawImage()는 다음과 같다.

drawImage(img, dx, dy)
	. img : 이미지 객체
	. dx, dy : 이미지가 그려질 캔버스 좌표(dx, dy)
	.
	: img 객체에 든 비트맵 이미지를 원본 크기로 캔버스의
		(dx, dy)위치에 그린다.

2. 크기 조절하여 그리기
: 원본 이미지의 크기를 조절하여 그리는 drawImage()는 다음과 같다.

drawImage(img, dx, dy, dWidth, dHeight)
	: dWidth, dHeight : 이미지가 그려지는 크기, dWidth X dHeight

	: img 객체의 비트맵 이미지를 캔버스의 (dx, dy) 위치에 
		dWidth X dHeight 크기로 변형하여 그린다.

3. 원본의 일부분을 크기 조절하여 그리기
: 원본 이미지의 일부분을 택하고 크기를 조절하여 그리는 drawImage()는 다음과 같다.

drawImage(img, sx, sy, sWidth, sHeight, dx, dy, dWidht, dHeight)
	: sx, sy : img 이미지 내 비트맵 좌표(sx, sy)
	: sWidth, sHeight : 그리기 위해 선택한 img 내의 비트맵 크기, sWidth X sHeight

	: img 이미지 내부의 (sx, sy)위치에서 sWidth, sHeight 영역의 비트맵을,
	캔버스의 (dx, dy) 위치에 dWidth, dHeight 크기로 변형하여 그린다.

* 마우스 이벤트 처리

- 마우스가 눌러질 때, function down(e) 실행
	: 마우스가 눌러지면 down(e) 함수가 실행되며,
	미벤트 객체 e의 e.offsetX와 e.offsetY를 통해
	캔버스 내 마우스가 눌러진 위치를 알 수 있다.

	: 마우스가 눌러진 위치에서 드래깅하는 동안 그림을 그리기
	때문에 마우스가 눌러진 위치를 전역변수 startX와 startY에 저장한다.

	.startX = e.offsetX // 마우스가 눌러진 x 위치 저장
	.startY = e.offsetY // 마우스가 눌러진 y 위치 저장

	그리고 이제 드래깅을 통해 그림이 그려질 상태를 뜻하는 dragging 변수를 true로 설정한다.
	: dragging = true;

- 마우스가 놓여질 때, function up(e) 실행
	:dragging = false;

- 마우스가 움직일 때, function move(e)실행
	마우스가 움직이는 동안 mousemove 이벤트가 계속 발생하여
	move(e) 함수가 계속 호출된다.
	: move(e)함수는 다음 코드를 이용하여 마우스가 눌려져 있지
	않으면 그냥 리턴한다.

	: if(!dragging) return;

	: dragging이 true 라면 curX와 curY에 현재 마우스의 위치 값 e.offsetX 와 e.offsetY를 저장한다.

	.curX = offsetX;
	.curY = offsetY;

	그리고 나서 (startX,startY)에서 (curX, curY)사이의 선을 그리도록 draw(curX, curY)를 호출한다.

	: draw(curX, curY);

	: (curX, curY)는 드래깅하는 동안 계속 변하는 마우스 커서의 현재 위치이다.

	: startX, startY를 현재 마우스의 위치로 변경하고 함수를 빠져나온다.

	. startX = curX;
	. startY = curY;

- 마우스가 캔버스를 벗어날 때, function out(e)를 실행
	: 마우스가 캔버스를 벗어나면 그림 그리기를 중단시킨다.
	이를 위해 out(e)함수에서는 다음과 같이 dragging 변수 값을 false로 설정한다.

		:dragging = false;

	* 그림 그리기, draw(curX, curY)
	: 캔버스는 점 단위로 그래픽을 수행하는 기능은 없고
	기본 단위가 선이다. 그러므로 한 픽셀의 점도 선으로 표현해야 한다.

	: 이 Test에서 그림을 그리는 함수는 draw()이다.
		: 이 함수를 호출하기전에 선의 시작점은 전역변수인 startX, startY에 저장하고,

		. 끝 점 curX, curY를 매개변수로 하여 draw(curX, curY)를 호출하면 된다.

	: 다음은 (startX, startY)에서 (curX, curY)까지 선을 그리는 draw() 함수 코드이다.

	. context.beginPath(); // 새로운 경로 시작
	. context.moveTo(startX, startY) // 새로운 시작점 추가
	. context.lineTo(curX,curY) // 경로에 (startX,startY)에서 (curX, curY)사이의 선을 추가
	. context.stroke(); // 경로 모두 그리기
